public class Main {

    public static Model fit(double[] data, double alpha) {
        validateParams(alpha);
        double[] levels = new double[data.length];

        // Calculate the predicted value
        levels[0] = data[0];
        levels[1] = (1 - alpha)*data[0] + alpha*data[1];

        for (int i = 2; i < data.length; i++) {
            levels[i] = (1 - alpha)*levels[i - 1]+ alpha*data[i];

        }
        return new Model(levels, calculateSum(data), calculateAverageDeviation(data), calculateSquaresError(data, levels), calculateAbsolutePercentageError(data, levels));
    }

    //Calculate sum of actual data to calculate mean later
    private static double calculateSum(double[] data){
        double sum = 0;
        for (int i = 1; i < data.length; i++) {
            sum += data[i];
        }
        return sum;
    }

    //Calculate sum of average deviation to calculate MAD later
    private static double calculateAverageDeviation(double[] data){
        double summ = 0;
        double sum1 = 0;
        //Sum of actual data
        for (int i = 1; i < data.length; i++) {
            summ += data[i];
        }
        //Sum of AD
        for (int j = 1; j < data.length; j++) {
            sum1 += Math.abs(data[j] - summ/646);
        }
        return sum1;
    }

    //Calculate sum of squares error to calculate MSE and RMSE later
    private static double calculateSquaresError(double[] data, double[] levels){
        double sum2 = 0;
        for (int i = 1; i < data.length; i++) {
            sum2 += Math.pow(data[i] - levels[i - 1], 2);
        }
        return sum2;
    }

    //Calculate the sum of absolute percentage error to calculate MAPE later
    private static double calculateAbsolutePercentageError(double[] data, double[] levels){
        double sum3 = 0;
        for (int i = 1; i < data.length; i++) {
            sum3 += (Math.abs(data[i] - levels[i - 1]))/data[i]*100;
        }
        return sum3;
    }

    //Make sure alpha value is valid
    private static void validateParams(double alpha) {
        if (alpha < 0 || alpha > 1) {
            throw new RuntimeException("The value of alpha must be between 0 and 1");
        }
    }

    static class Model {
        private final double[] levels;
        private final double sum;
        private final double sum1;
        private final double sum2;
        private final double sum3;

        public Model(double[] levels, double sum, double sum1, double sum2, double sum3) {
            this.levels = levels;
            this.sum = sum;
            this.sum1 = sum1;
            this.sum2 = sum2;
            this.sum3 = sum3;
        }

        //Get method for the requirement
        public double[] getLevel(){
            return levels;
        }

        //Mean
        public double getMean(){
            return sum/646;
        }

        //MAD
        public double getMAD(){
            return sum1/646;
        }

        //MSE
        public double getMSE(){
            return (sum2/646)*100;
        }

        //RMSE
        public double getRMSE(){
            return Math.sqrt((sum2/646))*100;
        }

        //MAPE
        public double getMAPE(){
            return sum3/646;
        }
    }

    public static void main(String[] args) {

        //Import actual data from excel
        double[] data = {0.0399, 0.0397, 0.0384, 0.0392,0.0385,	0.0332,	0.0323,	0.0298,	0.0260,	0.0247,	0.0244,	0.0198,	0.0145,	0.0254,	0.0202,	0.0149,	0.0198,	0.0173,	0.0117,	0.0200,	0.0188,	0.0226,	0.0261,	0.0233,	0.0215,	0.0237,	0.0285,	0.0278,	0.0236,	0.0268,	0.0271,	0.0293,	0.0290,	0.0290,	0.0294,	0.0293,	0.0292,	0.0300,	0.0298,	0.0290,	0.0300,	0.0299,	0.0302,	0.0349,	0.0348,	0.0350,	0.0348,	0.0338,	0.0348,	0.0348,	0.0343,	0.0347,	0.0350,	0.0350,	0.0342,	0.0350,	0.0345,	0.0336,	0.0352,	0.0385,	0.0390,	0.0398,	0.0404,	0.0409,	0.0410,	0.0404,	0.0409,	0.0412,	0.0401,	0.0408,	0.0410,	0.0432,	0.0442,	0.0460,	0.0465,	0.0467,	0.0490,	0.0517,	0.0530,	0.0553,	0.0540,	0.0553,	0.0576,	0.0540,	0.0494,	0.0500,	0.0453,	0.0405,	0.0394,	0.0398,	0.0379,	0.0390,	0.0399,	0.0388,	0.0413,	0.0451,	0.0460,	0.0471,	0.0505,	0.0576,	0.0611,	0.0607,	0.0602,	0.0603,	0.0578,	0.0591,	0.0582,	0.0602,	0.0630,	0.0661,	0.0679,	0.0741,	0.0867,	0.0890,	0.0861,	0.0919,	0.0915,	0.0900,	0.0885,	0.0897,	0.0898,	0.0898,	0.0776,	0.0810,	0.0794,	0.0760,	0.0721,	0.0661,	0.0629,	0.0620,	0.0560,	0.0490,	0.0414,	0.0372,	0.0371,	0.0415,	0.0463,	0.0491,	0.0531,	0.0556,	0.0555,	0.0520
            ,	0.0491,	0.0414,	0.0350,	0.0329,	0.0383,	0.0417,	0.0427,	0.0446,	0.0455,	0.0480,	0.0487,	0.0504,	0.0506,	0.0533,	0.0594,	0.0658,	0.0709,	0.0712,	0.0784,	0.0849,	0.1040,	0.1050,	0.1078,	0.1001,	0.1003,	0.0995,	0.0965,	0.0897,	0.0935,	0.1051,	0.1131,	0.1193,	0.1292,	0.1201,	0.1134,	0.1006,	0.0945,	0.0853,	0.0713,	0.0624,	0.0554,	0.0549,	0.0522,	0.0555,	0.0610,	0.0614,	0.0624,	0.0582,	0.0522,	0.0520,	0.0487,	0.0477,	0.0484,	0.0482,	0.0529,	0.0548,	0.0531,	0.0529,	0.0525,	0.0502,	0.0495,	0.0465,	0.0461,	0.0468,	0.0469,	0.0473,	0.0535,	0.0539,	0.0542,	0.0590,	0.0614,	0.0647,	0.0651,	0.0656,	0.0670,	0.0678,	0.0679,	0.0689,	0.0736,	0.0760,	0.0781,	0.0804,	0.0845,	0.0896,	0.0976,	0.1003,	0.1007,	0.1006,	0.1009,	0.1001,	0.1024,	0.1029,	0.1047,	0.1094,	0.1143,	0.1377,	0.1318,	0.1378,	0.1382,	0.1413,	0.1719,	0.1761,	0.1098,	0.0947,	0.0903,	0.0961,	0.1087,	0.1281,	0.1585,	0.1890,	0.1908,	0.1593,	0.1470,	0.1572,	0.1852,	0.1910,	0.1904,	0.1782,	0.1587,	0.1508,	0.1331,	0.1237,	0.1322,	0.1478,	0.1468,	0.1494,	0.1445,	0.1415,	0.1259,	0.1012,	0.1031,	0.0971,	0.0920,	0.0895,	0.0868,	0.0851,	0.0877,	0.0880,	0.0863,	0.0898,	0.0937,	0.0956,	0.0945
            ,	0.0948,	0.0934,	0.0947,	0.0956,	0.0959,	0.0991,	0.1029,	0.1032,	0.1106,	0.1123,	0.1164,	0.1130,	0.0999,	0.0943,	0.0838,	0.0835,	0.0850,	0.0858,	0.0827,	0.0797,	0.0753,	0.0788,	0.0790,	0.0792,	0.0799,	0.0805,	0.0827,	0.0814,	0.0786,	0.0748,	0.0699,	0.0685,	0.0692,	0.0656,	0.0617,	0.0589,	0.0585,	0.0604,	0.0691,	0.0643,	0.0610,	0.0613,	0.0637,	0.0685,	0.0673,	0.0658,	0.0673,	0.0722,	0.0729,	0.0669,	0.0677,	0.0683,	0.0658,	0.0658,	0.0687,	0.0709,	0.0751,	0.0775,	0.0801,	0.0819,	0.0830,	0.0835,	0.0876,	0.0912,	0.0936,	0.0985,	0.0984,	0.0981,	0.0953,	0.0924,	0.0899,	0.0902,	0.0884,	0.0855,	0.0845,	0.0823,	0.0824,	0.0828,	0.0826,	0.0818,	0.0829,	0.0815,	0.0813,	0.0820,	0.0811,	0.0781,	0.0731,	0.0691,	0.0625,	0.0612,	0.0591,	0.0578,	0.0590,	0.0582,	0.0566,	0.0545,	0.0521,	0.0481,	0.0443,	0.0403,	0.0406,	0.0398,	0.0373,	0.0382,	0.0376,	0.0325,	0.0330,	0.0322,	0.0310,	0.0309,	0.0292,	0.0302,	0.0303,	0.0307,	0.0296,	0.0300,	0.0304,	0.0306,	0.0303,	0.0309,	0.0299,	0.0302,	0.0296,	0.0305,	0.0325,	0.0334,	0.0356,	0.0401,	0.0425,	0.0426,	0.0447,	0.0473,	0.0476,	0.0529,	0.0545,	0.0553,	0.0592,	0.0598,	0.0605,	0.0601,	0.0600,	0.0585,	0.0574
            ,	0.0580,	0.0576,	0.0580,	0.0560,	0.0556,	0.0522,	0.0531,	0.0522,	0.0524,	0.0527,	0.0540,	0.0522,	0.0530,	0.0524,	0.0531,	0.0529,	0.0525,	0.0519,	0.0539,	0.0551,	0.0550,	0.0556,	0.0552,	0.0554,	0.0554,	0.0550,	0.0552,	0.0550,	0.0556,	0.0551,	0.0549,	0.0545,	0.0549,	0.0556,	0.0554,	0.0555,	0.0551,	0.0507,	0.0483,	0.0468,	0.0463,	0.0476,	0.0481,	0.0474,	0.0474,	0.0476,	0.0499,	0.0507,	0.0522,	0.0520,	0.0542,	0.0530,	0.0545,	0.0573,	0.0585,	0.0602,	0.0627,	0.0653,	0.0654,	0.0650,	0.0652,	0.0651,	0.0651,	0.0640,	0.0598,	0.0549,	0.0531,	0.0480,	0.0421,	0.0397,	0.0377,	0.0365,	0.0307,	0.0249,	0.0209,	0.0182,	0.0173,	0.0174,	0.0173,	0.0175,	0.0175,	0.0175,	0.0173,	0.0174,	0.0175,	0.0175,	0.0134,	0.0124,	0.0124,	0.0126,	0.0125,	0.0126,	0.0126,	0.0122,	0.0101,	0.0103,	0.0101,	0.0101,	0.0100,	0.0098,	0.0100,	0.0101,	0.0100,	0.0100,	0.0100,	0.0103,	0.0126,	0.0143,	0.0161,	0.0176,	0.0193,	0.0216,	0.0228,	0.0250,	0.0263,	0.0279,	0.0300,	0.0304,	0.0326,	0.0350,	0.0362,	0.0378,	0.0400,	0.0416,	0.0429,	0.0449,	0.0459,	0.0479,	0.0494,	0.0499,	0.0524,	0.0525,	0.0525,	0.0525,	0.0525,	0.0524,	0.0525,	0.0526,	0.0526,	0.0525,	0.0525,	0.0525,	0.0526
            ,	0.0502,	0.0494,	0.0476,	0.0449,	0.0424,	0.0394,	0.0298,	0.0261,	0.0228,	0.0198,	0.0200,	0.0201,	0.0200,	0.0181,	0.0097,	0.0039,	0.0016,	0.0015,	0.0022,	0.0018,	0.0015,	0.0018,	0.0021,	0.0016,	0.0016,	0.0015,	0.0012,	0.0012,	0.0012,	0.0011,	0.0013,	0.0016,	0.0020,	0.0020,	0.0018,	0.0018,	0.0019,	0.0019,	0.0019,	0.0019,	0.0018,	0.0017,	0.0016,	0.0014,	0.0010,	0.0009,	0.0009,	0.0007,	0.0010,	0.0008,	0.0007,	0.0008,	0.0007,	0.0008,	0.0010,	0.0013,	0.0014,	0.0016,	0.0016,	0.0016,	0.0013,	0.0014,	0.0016,	0.0016,	0.0016,	0.0014,	0.0015,	0.0014,	0.0015,	0.0011,	0.0009,	0.0009,	0.0008,	0.0008,	0.0009,	0.0008};

        //Take alpha = 0.1
        Model model = Main.fit(data, 0.1);

        //Print mean
        System.out.println("Mean is: " + model.getMean());
        //Print MAD
        System.out.println("Mean absolute deviation is: " + model.getMAD());
        //Print MSE
        System.out.println("Mean squares error is: " + model.getMSE() + "%");
        //Print RMSE
        System.out.println("Root mean squares error is: " + model.getRMSE() + "%");
        //Print MAPE
        System.out.println("Mean absolute percentage errror is: " + model.getMAPE());
        //Print predicted value of April 2013
        System.out.println("Predicted value for April 2013: " + model.levels[638]);
    }

}